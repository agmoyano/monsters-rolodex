{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","state","stringFilter","fetch","then","response","json","users","setState","this","re","RegExp","filtered","filter","match","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,G,kBAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHjBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GACf,OAAQ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCN9BM,G,MAAY,SAACX,GACtB,OACI,uBAAOC,UAAU,SAASW,KAAK,SAASC,YAAab,EAAMa,YAAaC,SAAUd,EAAMe,iBCgCjFC,E,kDA9Bb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACXR,SAAU,GACVS,aAAc,IAJC,E,gEAQE,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,+BAGhC,IAAD,SAC4BE,KAAKR,MAAhCR,EADD,EACCA,SAAUS,EADX,EACWA,aACZQ,EAAK,IAAIC,OAAOT,EAAc,KAC9BU,EAAWnB,EAASoB,QAAO,SAAAzB,GAAO,OAAIA,EAAQE,KAAKwB,MAAMJ,MAC/D,OACI,sBAAKzB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,YAAY,iBAAiBE,aAAc,SAAAgB,GAAC,OACrD,EAAKP,SAAS,CAACN,aAAca,EAAEC,OAAOC,WAExC,cAAC,EAAD,CAAUxB,SAAUmB,W,GA1BZM,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1b041001.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n}","import React from 'react';\nimport './card-list.styles.css';\n\nimport { Card } from '../card/card.component';\n\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n        {\n            props.monsters.map(monster => {\n                return (<Card key={monster.id} monster={monster} />);\n            })\n        }\n        </div>\n    )\n};","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = (props) => {\n    return (\n        <input className=\"search\" type=\"search\" placeholder={props.placeholder} onChange={props.handleChange} />\n    );\n}","import { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      stringFilter: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  \n  render() {\n    const { monsters, stringFilter } = this.state;\n    const re = new RegExp(stringFilter, 'i');\n    const filtered = monsters.filter(monster => monster.name.match(re));\n    return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBox placeholder=\"Search Monster\" handleChange={e =>\n            this.setState({stringFilter: e.target.value})\n          } />\n          <CardList monsters={filtered} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}